#version 460

in vec3 fN;
in vec3 fE;
in vec3 fL;
in vec4 vertexColor;

layout(location = 3) uniform vec4 ambientProduct;
layout(location = 4) uniform vec4 diffuseProduct;
layout(location = 5) uniform vec4 specularProduct;
layout(location = 6) uniform mat4 modelView;
layout(location = 8) uniform vec4 lightPosition;
layout(location = 9) uniform float shininess;

void main() {
	vec3 N = normalize(fN);
	vec3 E = normalize(fE);
	vec3 L = normalize(fL);
	vec3 H = normalize(L+E);
	vec4 ambient = ambientProduct;

	float Kd= max(dot(L, N), 0.0);
	vec4 diffuse = Kd* diffuseProduct;

	float Ks = pow(max(dot(N, H), 0.0), shininess);
	vec4 specular = Ks * specularProduct;
	if ( dot(L, N) < 0.0 ) specular = vec4(0.0, 0.0, 0.0, 1.0);

	gl_FragColor= (ambient + diffuse + specular) * vertexColor;
	gl_FragColor.a= 1.0;
}