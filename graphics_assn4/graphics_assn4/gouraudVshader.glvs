#version 460

layout(location = 0) in vec3 aPos;
layout(location = 1) in vec3 aColor;
layout(location = 2) in vec3 aNormal;

out vec4 vertexColor;

layout(location = 3) uniform vec4 ambientProduct;
layout(location = 4) uniform vec4 diffuseProduct_point;
layout(location = 5) uniform vec4 diffuseProduct_directional;
layout(location = 6) uniform vec4 specularProduct_point;
layout(location = 7) uniform vec4 specularProduct_directional;
layout(location = 8) uniform mat4 modelView;
layout(location = 9) uniform mat4 projection;
layout(location = 10) uniform vec4 lightPosition_point;
layout(location = 11) uniform vec4 lightPosition_directional;
layout(location = 12) uniform float shininess;

void main() {
	gl_Position = projection * modelView * vec4(aPos, 1.0);

	vec3 pos = (modelView * vec4(aPos, 1.0)).xyz;
	vec3 L_point = normalize(lightPosition_point.xyz - pos);
	vec3 L_directional = normalize(lightPosition_directional.xyz);
	vec3 E = normalize(-pos);
	vec3 H_point = normalize(L_point + E);
	vec3 H_directional = normalize(L_directional + E);
	vec3 N = normalize(modelView * vec4(aNormal, 0.0)).xyz;

	vec4 ambient = ambientProduct;

	//Point light
	float distance = length(L_point);
	float attenuation = 1.0 / (1.0 + 0.09 * distance + 0.032 * (distance * distance));
	float LN_point = max(dot(L_point,N), 0.0);
	vec4 diffuse_point = LN_point * diffuseProduct_point;
	diffuse_point *= attenuation;
	float HN_point = pow(max(dot(N,H_point), 0.0), shininess);
	vec4 specular_point = HN_point * specularProduct_point;
	if(dot(L_point,N) < 0.0) specular_point = vec4(0.0, 0.0, 0.0, 1.0);
	specular_point *= attenuation;

	//Directional light
	float LN_directional = max(dot(L_directional,N), 0.0);
	vec4 diffuse_directional = LN_directional * diffuseProduct_directional;
	float HN_directional = pow(max(dot(N,H_directional), 0.0), shininess);
	vec4 specular_directional = HN_directional * specularProduct_directional;
	if(dot(L_directional,N) < 0.0) specular_directional = vec4(0.0, 0.0, 0.0, 1.0);

	vertexColor = vec4(aColor, 1.0) * (ambient + (diffuse_point + diffuse_directional) + (specular_point + specular_directional));
	//vertexColor = vec4(aColor, 1.0) * (ambient + diffuse_point + specular_point);
	//vertexColor = vec4(aColor, 1.0) * (ambient + diffuse_directional + specular_directional);
	vertexColor.a = 1.0;
}