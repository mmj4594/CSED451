#version 460

layout(location = 0) in vec3 aPos;
layout(location = 1) in vec3 aColor;
layout(location = 2) in vec3 aNormal;

out vec4 vertexColor;

layout(location = 3) uniform vec4 ambientProduct;
layout(location = 4) uniform vec4 diffuseProduct;
layout(location = 5) uniform vec4 specularProduct;
layout(location = 6) uniform mat4 modelView;
layout(location = 7) uniform mat4 projection;
layout(location = 8) uniform vec4 lightPosition;
layout(location = 9) uniform float shininess;

void main() {
	gl_Position = projection * modelView * vec4(aPos, 1.0);

	vec3 pos = (modelView * vec4(aPos, 1.0)).xyz;
	vec3 L = normalize(lightPosition.xyz - pos);
	vec3 E = normalize(-pos);
	vec3 H = normalize(L + E);
	vec3 N = normalize(modelView * vec4(aNormal, 0.0)).xyz;

	vec4 ambient = ambientProduct;

	float LN = max(dot(L,N), 0.0);
	vec4 diffuse = LN * diffuseProduct;

	float HN = pow(max(dot(N,H), 0.0), shininess);
	vec4 specular = HN * specularProduct;
	if(dot(L,N) < 0.0) specular = vec4(0.0, 0.0, 0.0, 1.0);

	vertexColor = vec4(aColor, 1.0) * (ambient + diffuse + specular);
	vertexColor.a = 1.0;
}